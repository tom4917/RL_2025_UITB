simulator_name: "mobl_arms_index_pointing_HRL"

simulation:

  bm_model:
    cls: "MoblArmsIndex"
    kwargs:
      shoulder_variant: "none"
      effort_model:
        cls: "Neural"
        kwargs:
          weight: 1e-4

  task:
    cls: "Pointing"
    kwargs:
      end_effector: ["geom", "hand_2distph"]
      shoulder: ["body", "humphant"]
      # It's not necessary to define the stateful_information_encoder to Identity encoder, as that is used by default
      stateful_information_encoder:
        module: "rl.encoders"
        cls: "Identity"

  perception_modules:
    - cls: "vision.FixedEye"
      kwargs:
        resolution: [120, 80]
        channels: [3]
        pos: "0 0 1.2"
        quat: "0.583833 0.399104 -0.399421 -0.583368"
        # It's not necessary to define the encoder to SmallCNN, as vision.FixedEye uses that by default
        encoder:
          module: "rl.encoders"
          cls: "SmallCNN"
          kwargs:
            out_features: 256
    - cls: "proprioception.BasicWithEndEffectorPosition"
      kwargs:
        end_effector: ["geom", "hand_2distph"]
        
  run_parameters:
    action_sample_freq: 40

rl:
  algorithm: "PPO"
  policy_type: "policies.MultiInputActorCriticPolicyTanhActions"
  policy_kwargs:
    activation_fn: "torch.nn.LeakyReLU"
    net_arch: [256, 256]
    log_std_init: 0.0
    features_extractor_class: "feature_extractor.FeatureExtractor"
    normalize_images: False
  lr: 
    function: "schedule.linear_schedule"
    kwargs:
      initial_value: 5e-5
      min_value: 1e-7
      threshold: 0.8
  total_timesteps: 40_000_000
  device: "cuda"
  num_workers: 10
  nsteps: 4000
  batch_size: 500
  target_kl: 1.0
  save_freq: 5_000_000

llc:
    llc_ratio: 1
    simulator_name: "mobl_arms_llc"
    checkpoint: "model_270000000_steps.zip"
    joints: ["elv_angle", "shoulder_elv", "shoulder_rot", "elbow_flexion", "pro_sup"]
